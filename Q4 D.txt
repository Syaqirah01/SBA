import threading

class FibonacciThread(threading.Thread):
    def __init__(self, start, end):
        super().__init__()
        self.start = start
        self.end = end

    def run(self):
        global fibonacci_numbers

        for i in range(self.start, self.end + 1):
            fibonacci_numbers.append(i)

def main():
    threads = []
    fibonacci_numbers = []
    square_numbers = []
    cube_numbers = []

    # Create three threads, each one responsible for printing a range of Fibonacci numbers.
    for i in range(3):
        start = 1000 * i
        end = 1000 * (i + 1)
        thread = FibonacciThread(start, end)
        threads.append(thread)

    # Start all three threads.
    for thread in threads:
        thread.start()

    # Check if all three threads have finished executing.
    while len(threads) > 0:
        for thread in threads:
            if not thread.is_alive():
                threads.remove(thread)

    print("Fibonacci numbers from 1 to 10,000: {}".format(fibonacci_numbers))
    print("Square numbers from 1 to 10,000: {}".format(square_numbers))
    print("Cube numbers from 1 to 10,000: {}".format(cube_numbers))

if __name__ == "__main__":
    main()
